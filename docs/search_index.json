[
["index.html", "R: Uma Introdução para economistas Capítulo 1 Introdução", " R: Uma Introdução para economistas Daniel Coutinho 04/07/2018 Capítulo 1 Introdução Existem muitos softwares de estatística, mas o R é um dos mais populares. O R é um software gratuito, o que justifica a sua escolha. Mas além disso, a comunidade é muito ativa, desenvolvendo muitos pacotes - inclusive para econometria. O R não é tão amigável quanto o gretl: não existem menus para escolher como estimar. Entretanto, ele é muito mais flexível. Assim, o R tem ganho cada vez mais espaço entre aqueles que fazem econometria. Este manual foi criado para ajudar a introduzir economistas ao R. Com isso, ele é mais voltado para exemplos de tratamento de dados e ferramentas estatísticas usadas pelos economistas. Existem outros excelentes livros que ensinam a usar o R, e alguns aplicados à econometria. Eles estão listados nas referências deste manual. Mas nenhum deles é em português, e muitos são muito detalhistas e longos. Este manual tenta servir como algo menos extenso que os livros. Portanto, uma consulta aos livros pode ser muito útil. Esta é a segunda versão do manual, que foi extensivamente reescrito em meados de 2017 e início de 2018. Não é necessário nenhuma experiência anterior com programação, mas é necessário saber (alguma) econometria. O autor agradece as muitas pessoas na PUC-Rio que ajudaram com o R, bem como os seis meses trabalhando no Dlab. As duas versões anteriores foram escritas, originalmente, em LaTeX, o gold standard da edição de texto acadêmica.Essa versão foi escrita usando o bookdown, um pacote do R para produzir livros para a internet. Algumas palavras sobre a filosofia por trás desse manual são necessárias: a ideia é tirar o leitor do chão e colocar ele pronto para fazer as coisas básicas de econometria rapidamente. Isso envolve notórias omissões. O autor muitas vezes sugere consultar o help, o que deve ser visto não como preguiça, mas sim como a única maneira de fazer as coisas: existem mais de 12 mil pacotes disponíveis para o R, e nenhum ser humano jamais conseguirá explorar e entender todos. O autor usou, diretamente, uma dúzia pacotes, se tanto. E invariavelmente é necessário consultar o help para saber qual o nome do argumento que faz alguma coisa específica. Assim, a ideia aqui é entender as ideias gerais do R, os comandos básicos e o mínimo do vocabulário para saber consultar/ler o help. Definitivamente, esse manual deve ser lido com o R aberto e tentando entender cada um dos comandos que são ditos aqui. Uma leitura comparativa entre o help e o que eu coloco no manual sobre cada comando é provavelmente a melhor maneira de proceder. Tentar replicar tudo que eu faço é certamente uma maneira garantida de aprender.As seções Hands on propõe exercícios específicos para serem feitos no R. O manual é dividido em três partes: a primeira trata de como fazer econometria no R: é o coração do manual e é de principal interesse dos economistas; a segunda parte trata de como programar no R, o que é útil em algumas atividades um pouco mais avançadas. A terceira parte será dedicada a algumas coisas de matemática no R. Seções marcadas com um * são mais indigestas para a primeira leitura. "],
["primeiros-passos.html", "Capítulo 2 Primeiros Passos 2.1 Instalação 2.2 Ajuda 2.3 Comentando 2.4 Objetos*", " Capítulo 2 Primeiros Passos 2.1 Instalação 2.1.1 Instalando o R e o RStudio Instalar o R é trivial: basta ir no http://cran.r-project.org/ e baixar a versão para o seu computador. Exceto se você usar alguma distribuição de Linux (Ubuntu, por exemplo): ai é mais difícil, mas o próprio CRAN dá instruções de como fazer. Depois, recomenda-se baixar o R Studio, disponível em https://www.rstudio.org/. O R Studio é uma IDE (Integrated Development Enviroment), que facilita muito a vida na hora de programar - especialmente dando sugestões de comandos e mostrando quais variáveis estão salvas no ambiente do R. Assim, sugiro instalar o R Studio, que é bem tranquilo. Para usar o R Studio, você precisa ter o R. 2.1.2 Uma alternativa Se o seu computador tem um processador multi-core, pode ser interessante instalar o Microsoft R, disponível em http://mran.microsoft.com/. Ele é idêntico ao R, mas vem com uma biblioteca que tira vantagem dos vários núcleos do processador, o que o R padrão não faz. A principal desvantagem é que ele é atualizado com menos frequência, e a biblioteca que usa mais de um núcleo não está disponível para o Mac. Ele funciona com o R Studio. 2.1.3 Interface A interface do R Studio mostra 4 espaços diferentes: no canto esquerdo superior, existe uma tela chamada source (se ela não estiver lá, tente usar ctrl + shift + n para abrir); a direita dela, o ambiente; no canto inferior esquerdo, está o console; e no canto inferior direito está uma tela multiuso, que deve vir com as abas plot, files. Cada uma dessas será explicada, por alto, nesta seção A que mais nos interessa, em um primeiro momento, é o console. Nele, você pode passar comandos direto para o R. Digitando 2 + 2 nele e clicando em enter, o resultado deve aparecer na tela. Em geral, é nele que você vai trabalhar. Entretanto, escrever código muito longos no console é muito ruim. O console é desorganizado, não permite salvar o código passado para ele para ser usado mais tarde e não permite com que você corrija erros com facilidade. O source serve justamente para escrever um código longo - uma função ou uma simulação, por exemplo - que pode ser executado no console. Para isso, basta selecionar o conteúdo e dar ctrl + enter ou chegar no fim da linha e usar ctrl + enter. A tela do canto direito inferior é uma “geleia geral”: a aba plots é onde os gráficos que faremos vão aparecer; a aba files permite você ver arquivos em diferentes pastas do computador. Estas são as abas mais importantes e que mais serão usadas. Em cima desta tela, há a tela environment, que mostra as variáveis que foram criadas e estão disponíveis para o R usar 2.1.4 Pacotes O grande atrativo do R são os pacotes. Para instalar um pacote, basta digitar no console: install.packages(&quot;nome-do-pacote&quot;) É necessário colocar as aspas para o pacote instalar. Uma vez instalado, o pacote não é carregado automaticamente. Para carregar o pacote, basta digitar no console: library(nome-do-pacote) Agora as aspas não são necessárias. Instalar pacote por pacote pode ser uma tarefa chata. Além do mais, isto exige que você saiba quais são os pacotes que fazem cada coisa. Felizmente, o CRAN mantém coleções de pacotes de determinados temas, chamados de Task Views. Existe um de econometria, e para instalar ele é necessário instalar o pacote ctv , e depois o task view de econometria: install.packages(&quot;ctv&quot;) library(ctv) install.views(&quot;Econometrics&quot;) Como são muitos pacotes, esta operação pode tomar algum tempo. Em geral, muitos dos pacotes nos task view não são tão úteis, então pode ser interessante ir no cran, e visitar os task views para selecionar quais pacotes de lá fazem o que você precisa fazer. Existem vários pacotes, para diferentes áreas. Para os economistas, além do pacote de econometria, os pacotes de Time Series, Bayesian, Finance, Machine Learning podem ser de interesse. De fato, com a expansão das áreas de pesquisas, muitos outros task views podem ser de interesse! Recomenda-se visitar o cran para ter uma visão do que está disponível. Hands on! Vamos instalar um primeiro pacote que adiciona vários comandos importantes para econometria e alguns datasets de livros de econometria (como o Stock Watson). O nome do pacote é AER. Ele vai instalar vários outros pacotes que ele necessita para funcionar, então a instalação pode demorar um pouco. Ele será usado de agora por diante, então tenham certeza que ele está carregado, ou seja, que vocês sempre estão usando o library(AER) quando abrem o R. 2.2 Ajuda Em 90% do tempo você vai precisar de olhar o help: seja para lembrar que opções estão disponíveis em um comando, ou lembrar exatamente o que o comando faz, ou descobrir qual o comando para fazer alguma coisa específica que você só tem uma palavra chave: ``Como gera números saídos de uma distribuição normal mesmo?’’1 Se você sabe o comando e quer ler o help deste comando, basta fazer ?comando. Por exemplo, se você quiser saber o que o comando rnorm faz e quais as opções ele oferece, basta digitar no console ?rnorm. Se você não sabe o nome do comando, mas quer saber todos os comandos que estão relacionados a uma determinada palavra chave, use ??palavra. Por exemplo, se você quiser saber todos os comandos que envolvem a distribuição normal, basta usar ??normal. Observe que, se você tiver muitos pacotes, isto pode demorar um pouco, já que exige que o R procure cada pacote que se referencie àquela palavra. Você também pode estar interessado em todos os comandos de um pacote. Neste caso, a melhor solução é é usar help(package=``nome-do-pacote''). 2.3 Comentando Em geral, quando se escreve um código, é importante explicar o que algumas partes do código fazem. Isso não é exclusivo para o caso em que o código vai ser distribuído: pelo contrário, o você do futuro vai agradecer muito o você do passado se você comentar o seu código. Para comentar o código no R, usa-se o #. Tudo depois do # vira um comentário é ignorado pelo R. Assim, suponha que queremos explicar o que o parâmetro a abaixo é: suponha que ele vem de um outro estudo, de Cleese et. al. (1975). Então: a &lt;- 1 #Retirado de Cleese et. al. (1975) A regra geral para comentários é: eles não devem ser óbvios (ex.: 1 + 1 # somando dois números) mas devem ajudar o leitor - que eventualmente será você mesmo - a entender o que está sendo feito - especialmente em momentos mais obscuros. 2.4 Objetos* Como qualquer linguagem de programação, existem vários tipos de objetos no R. Objetos são maneiras diferentes de guardar os dados. Os mais usados e mais comuns são: Vetor Matriz Dataframe Lista Em geral, para dar um nome a um objeto, usamos uma setinha, &lt;-, que é o sinal de menor e o menos. Podemos usar o igual também, mas é preferível a seta. Então, se fizermos a &lt;- 1 e digitarmos a, o R vai mostrar 1. Veja que por padrão o R não mostra o valor de objetos que você acabou de criar, e vai mostrar apenas se você pedir. a &lt;- 1 a ## [1] 1 Vetores são só coleções unidimensionais de “coisas”. Para criar um vetor, basta usar c() e separar os elementos por vírgula. Suponha que queremos listar os 4 primeiros números primos, então poderíamos fazer: primos &lt;- c(2,3,5,7) Assim, ao digitar no console primos: primos ## [1] 2 3 5 7 Podemos fazer operações com vetores, como somar, subtrair, multiplicar e dividir. Observe que multiplicar um vetor não é multiplicar uma matriz: o R vai multiplicar elemento a elemento. Então c(1,2,3)*c(1,2,3) gera como resultado: c(1,2,3)*c(1,2,3) ## [1] 1 4 9 Para multiplicar dois vetores como multiplicariamos usualmente, usamos %*%: c(1,2,3)%*%c(1,2,3) ## [,1] ## [1,] 14 Podemos agrupar vetores em matrizes, usando os comandos cbind e rbind, que transforma cada vetor em uma coluna ou em uma linha, respectivamente. Assim, se fizermos cbind(c(1,2),c(3,4)), teríamos: cbind(c(1,2),c(3,4)) ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Se usarmos o rbind(c(1,2),c(3,4)), teríamos: rbind(c(1,2),c(3,4)) ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 Existe outra maneira de fazer matrizes, com o comando matrix. Veja que as operações *e %*% funcionam assim como elas funcionam com vetores: *multiplica elemento a elemento a matriz e %*%multiplica a matriz da maneira usual: A &lt;- matrix(c(1,2,3,4),ncol = 2) B &lt;- matrix(c(1,1,1,1),ncol = 2) A*B ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 A%*%B ## [,1] [,2] ## [1,] 4 4 ## [2,] 6 6 Observe que matrizes forçam todos os elementos a serem do mesmo tipo. Suponha que você quer fazer uma matriz com nomes e notas de alunos, e quer tirar a média das notas. O R vai acusar um erro, porque as notas não serão do tipo numérico, e sim do tipo character, que é o tipo do nome dos alunos. Para contornar este problema e poder agregar vetores com diferentes tipos - como é o caso do exemplo de notas de alunos e notas é que existe o objeto do tipo dataframe. O comando data.frame funciona como um cbind, que permite diferente juntar vetores de diferentes tipos em uma “matriz”. Observe que, para formar matrizes e dataframes, os vetores tem que ter o mesmo tamanho, o que nem sempre é possível ou desejável. Neste contexto, existem as listas, que são um anything goes. Você pode ter uma lista de vetores, uma lista de variáveis, uma lista de listas etc. Além disto, você pode dar nomes as coisas dentro dela e chamar pelo nome. Por exemplo, se fizermos: um.teste &lt;- list(Ola = &quot;Olá&quot;, Dia = date()) E depois digitarmos um.teste$Dia, ele deve exibir qual a data atual. Digite um.teste$Ola e ele deve exibir um Olá na sua tela: um.teste$Dia ## [1] &quot;Wed Jul 04 15:08:42 2018&quot; um.teste$Ola ## [1] &quot;Olá&quot; Observem que eu usei um “Olá”, entre aspas na lista. Aspas são bastante importante. Por exemplo, faça: c(&quot;Bom&quot;,&quot;Dia&quot;). O R vai mostrar na tela as duas palavras. Agora, suponha que você esquecesse as aspas no Dia. Agora, o R dará um erro: ele afirma que o objeto Dia não foi encontrado. Assim, se quisermos digitar palavras, frases, letras, devemos colocar eles entre aspas. Caso contrário, o R vai buscar o objeto com aquele nome. De maneira bastante grosseira, expressões desse tipo são chamadas de string. Familiarizados com como instalar, pedir ajuda, e os principais objetos do R, podemos proceder para a primeira etapa de qualquer análise de dados: como inserir os dados no R. Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ "],
["inserindo-e-manipulando-dados-no-r-o-basico-.html", "Capítulo 3 Inserindo e Manipulando Dados no R: O básico. 3.1 Arquivos excel/csv 3.2 Lendo arquivos do stata e outros pacotes estatísticos 3.3 Lendo arquivos muito grandes 3.4 Trabalhando com os dados", " Capítulo 3 Inserindo e Manipulando Dados no R: O básico. Só podemos fazer análise de dados se tivermos… dados. Este capítulo ensina a colocar os dados no R e a manipular eles como para criar variáveis necessárias ou limpar os dados antes de iniciarmos a análise. Esse capítulo não tenta ser enciclopédico nem detalhista: pelo contrário, ele omite muitas coisas. A omissão mais grave é, sem dúvida alguma, os pacotes do Tidyverse. A omissão se deve a ignorância do autor em usar estes pacotes. 3.1 Arquivos excel/csv O R não lê diretamente arquivos excel (.xls ou .xlsx), apesar de alguns pacotes permitirem o R ler estes arquivos. Mas esta não é a melhor opção: o ideal é salvar a planilha com os dados em outro formato, como .csv. Isto não é difícil: basta, no excel, ir em salvar como, e embaixo na opção de nome do arquivo há a opção de escolher o formato. O que queremos é csv (separado por vírgula) Para carregar o arquivo no R, precisamos saber algumas poucas coisas: O seu excel usa ponto ou vírgula como separador decimal? *Aonde está o arquivo O item 1 importa porque, se o separador decimal for vírgula, usamos o comando read.csv2. Caso contrário, usamos read.csv. O comando é bem simples: basta passar o caminho (aquele C:/Usuário/…). Por exemplo, suponha que eu tenho um csv chamado dados, e quero importar ele para o R. Ele fica no C:/Usuário/Autor/Manual. Então, eu faria: read.csv2(&quot;C:/Usuário/Autor/Manual/dados.csv&quot;) Observe que o caminho para o arquivo está entre aspas e que você precisa colocar a extensão do arquivo no fim - o .csv. Mais uma observação: em geral, se você copiar e colar o caminho como o Windows dá o nome de arquivo com ao invés de /. O R só lê usando /, então você tem que alterar isto. Neste caso, o R só vai exibir os dados, e não vai salvar eles dentro do R. Você não vai poder fazer nada com os dados. Para podermos usar eles mais tarde, precisamos salvar ele no ambiente do R. Para isto, basta criar um objeto com os dados, como já fizemos no capítulo anterior. Por exemplo, podemos ser extremamente criativos e chamar o objeto de dados. Nesse caso: dados &lt;- read.csv2(&quot;C:/Usuário/Autor/Manual/dados.csv&quot;) Se você não está familiarizado com usar o caminho dos arquivos, isto pode parecer excessivamente complicado. Felizmente, o R permite com que você escolha o caminho do arquivo de maneira mais usual, usando um menu e o mouse. Para isto, precisamos alterar o comando acima ligeiramente: dados &lt;- read.csv2(file.choose()) Isto vai abrir o menu e permitir que você escolha o arquivo como um menu do word. Entretanto, apesar de ser mais fácil, essa solução pode ser extremamente inconveniente: toda vez que você for rodar o programa você vai ter que escolher. Apesar de trabalhar com o caminho ser um pouco mais chato, isto poupa muito tempo. 3.2 Lendo arquivos do stata e outros pacotes estatísticos Muitos arquivos com dados ainda são distribuídos em versão de programas estatísticos, como o stata. É fácil ler estes arquivos usando o pacote foreign. Normalmente este pacote já vem instalado, mas caso você não tenha, você pode instalar como qualquer outro pacote. Ele permite ler dados do SAS, SPSS, entre outros. A ideia é a mesma da seção anterior, mas com comandos diferentes para cada tipo de arquivo: o ideal é consultar o help do pacote. Por exemplo, para ler um arquivo do stata, o comando no pacote foreign é read.dta. Suponha que, ao invés de ser um arquivo .csv, meus dados do exemplo anterior estivessem salvos em formato do stata. Bastaria fazer: dados &lt;- read.dta(&quot;C:/Usuário/Autor/Manual/dados.dta&quot;) Porém, o read.dta só lê arquivos criados pelo stata até a versão 12. Para versões posteriores do stata, existe um pacote chamado readstata13. Se, ao usar o read.dta você receber uma mensagem de erro, vale a pena checar o readstata13. 3.3 Lendo arquivos muito grandes Algumas bases de dados podem ser muito grandes, e o R pode sofrer para abrir - mesmo em computadores com muita memória e muito processamento. Para driblar o problema, o pacote data.table ajuda a carregar arquivos grandes para o R. O pacote trás várias opções para trabalhar com os dados carregados, que não serão tratadas aqui. Outra opção é o pacote readr, que funciona de forma parecida com o comando padrão do R. Para ler um csv que usa vírgulas para separar decimais, o comando é read\\_csv2 - basicamente idêntico ao comando padrão do R, mas com uma linha no lugar do ponto. Ao carregar o arquivo, tudo funciona como o usual. Uma pequena diferença é que o nome das variáveis é preservado: assim, uma variável chamada “Nome da variável” continuará se chamando “Nome da variável”, ao invés do padrão do read.csv2 de transformar em “Nome.da.variável”. Apesar de isso parecer bom a primeira vista, dificulta acessar as variáveis mais tarde, já que o R não entende nomes com espaço para objetos. %falta explicar como carregar os arquivos 3.4 Trabalhando com os dados Uma vez carregado os dados, pode ser necessário manipular os dados de diversas maneiras. Esta seção tratará de algumas das maneiras mais comuns. 3.4.1 Selecionando linhas/colunas/elementos Selecionar uma linha ou uma coluna específica de uma base de dados é essencial. Se quisermos rodar uma regressão e cada coluna da tabela é uma variável, então temos que ser capazes de informar ao R quais colunas serão usadas como variável explicada e quais como variável explicativa. O R usa a notação de matrizes com colchetes, então para selecionar a 4ª linha da base de dados chamada dados, basta fazer dados[4,]. Veja que colocamos a vírgula e depois deixamos em branco, informando ao R que queremos todas as colunas. Para obter todas as linhas da quarta coluna, fazemos dados[,4]. E se quisermos apenas algumas linhas ou algumas colunas? Podemos passar um vetor dizendo quais são essas linhas e/ou colunas. Por exemplo, se quisermos as linhas 1 a 4, podemos passar um dados[1:4,]. E se quisermos as linhas 1 e 4, podemos fazer: dados[c(1,4),] Outra maneira, bastante útil, de selecionar variáveis é pelo nome delas. Suponha que os dados vem com nomes id, renda, escolaridade. Para selecionar a variável renda, basta fazer dados$renda. Veja que isso exige saber como (e se) o R importou os nomes. Para isso, a função names permite saber quais os nomes das variáveis. Logo names(dados) vai retornar os nomes das variáveis. Em geral, os espaços são substituídos por pontos, logo uma variável anos de estudo se tornará anos.de.estudo. Veja que também podemos acessar as variáveis em um data.frame usando nome do data.frame$nome da variável. Assim, se temos um data.frame com nome dados e queremos acessar a variável renda, bastaria fazer dados$renda. Veja que podemos querer selecionar apenas um elemento. No caso de vetor, é a única coisa que faz sentido: o vetor só tem uma dimensão (uma linha ou uma coluna), então só podemos pegar um elemento dele. Suponha que temos o vetor \\(\\mathbf{v}\\) e queremos o décimo elemento: basta fazer v[10]. Veja que não usamos vírgulas, que são usadas apenas para separar as dimensões. Se quisermos um elemento de uma matriz, basta passar a linha e a coluna dele, respectivamente. Por exemplo, o elemento da segunda linha e quinta coluna do dataframe dados é obtido usando dados[2,5]. Mas o R permite você selecionar o elemento de uma matriz como se fosse um vetor! Suponha uma matriz - chamaremos ela de \\(\\mathbf{M}\\) - com 5 linha e 5 colunas. O último elemento da matriz pode ser obtido com M[5,5] ou, equivalentemente, M[25]. Veja que o 25 não é a toa, no total a matriz tem 25 elementos: logo, o último tem que ser o membro 25. As vezes, queremos transformar uma variável contínua em uma dummy. Pode ser o caso que queremos isolar apenas aqueles que recebem menos de um salário mínimo, e queremos que quem tiver menos de um salário mínimo tenha valor 1 e, caso contrário, 0. Suponha que o salário mínimo seja 678, e que a variável de salários se chame w. Então, bastaria fazer: sal.min &lt;- w &lt; 678 Observe que o R vai gerar um vetor de Verdadeiros e Falso. É possível converter para numérico, mas não há nenhuma necessidade, uma vez que o R é capaz de interpretar o verdadeiro ou falso como uma dummy na regressão. O que estamos fazendo é apenas uma operação de compara cada número do vetor ao número 678. Testamos se ele é menor (&lt;), mas poderíamos ver que números são maiores (&gt;), iguais (==)2, menor ou igual (&lt;=) ou maior ou igual (&gt;=). Estes operadores não são apenas úteis para criar dummies, mas também pode servir para escrever funções, que será tratado mais a frente. Pode ocorrer de a variável vir como um vetor de palavras ou siglas. Suponha que estamos trabalhando com um painel que tem variação temporal e por estado, e o vetor de estados vem com as siglas dos estados (RJ,SP,ES,MG,DF…). Se quisermos usar efeitos fixos de uma maneira extremamente ingênua, poderíamos criar dummies para cada estado e estimar o efeito fixo de cada estado. Esta não é uma maneira inteligente de fazer, já que existem pacotes para fazer estimação usando efeitos fixos com bem menos trabalho, que serão tratados no próximo capítulo. Mas, no momento, vamos ignorar esta opção e tentar criar uma dummy para cada estado. Uma possível solução era criar um vetor para cada estado (Ou talvez uma matriz com n linha e o número de colunas sendo igual o número de estados), ler cada posição do vetor das siglas usando um loop e colocar um 1 na coluna correspondente, criando um vetor índice para o R buscar qual coluna é relacionada com cada estado… Se a explicação anterior bagunçou o seu cérebro, não se preocupe: ela é complicada, e o R não exige nada tão complicado3 Uma solução muito mais simples é usar o comando factors, que gera automaticamente dummies para cada categoria. Assim, RJ vira uma dummy, SP outra etc. Isso é automático, e podemos jogar direto numa regressão. Assim, suponha que temos uma base de dados chama dados e a coluna 2 é a coluna com os estados. Nesse caso: estados &lt;- factor(dados[,2]). Poderíamos usar estados diretamente na regressão, que será tratada no capítulo seguinte. Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ Nada haver com carro: é uma sigla para Companion to Applied Reggresion↩ "],
["regressao-basica.html", "Capítulo 4 Regressão Básica 4.1 Mínimos quadrados ordinários 4.2 Probits e Logits 4.3 Variável instrumental 4.4 Dados em painel", " Capítulo 4 Regressão Básica O coração de econometria é o modelo de regressão linear, estimado por Mínimos Quadrados Ordinários. Mas muitos outros métodos são úteis, como modelos logit, probit, variáveis instrumentais e modelos para painel. Este capítulo trata - finalmente! - de modelos de regressão no R. 4.1 Mínimos quadrados ordinários Suponha que carregamos uma base de dados (chamada dados), e que esta base tem as variáveis \\(y, x.1,x.2,x.13\\) e que nosso objetivo é estimar um modelo da forma: \\(y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_3 + \\epsilon\\). O comando que faz estimativa por mínimos quadrados é o lm e para estimarmos a regressão proposta basta fazer: reg &lt;- lm(y ~ x.1 + x.2 + x.3 + x.4, data = dados) Usamos o ~ para separar a variável explicada (à esquerda do til) das explicativas (à direita do til), e para separar as explicativas usamos o +. A opção data diz ao R onde buscar as variáveis. Agora, o objeto reg4 tem o modelo estimado. Para obter uma tabela usual de regressão, com valor do coeficiente, erro padrão, estatística t e p-valor, \\(R^2\\) ajustado, e o teste F para os coeficientes basta usar summary(reg). No contexto de regressão linear, podemos querer fazer uma série de coisas, que são explicadas a seguir. Atenção: Séries Temporais e o lm Objetos de série temporal são armazenados pelo R de uma maneira especial - uma vez que você transforma ele em um objeto de série temporal (algo que esse manual ainda não trata). Entretanto, você não deve passar um objeto de série temporal para o lm(), já que o lm vai ignorar o formato de série temporal. Assim, estimar um modelo AR(1) usando lm(y ~ lag(y)) vai gerar uma regressão com coeficiente 1 para lag(y) e \\(R^2 = 1\\). De fato, a regressão feita foi y em y - o que não é uma regressão muito emocionante. 4.1.1 Testes de hipótese Suponha que queremos testar a significância conjunta de x.2 e x.3. Precisamos fazer um teste F. Uma maneira é estimar um novo modelo, que chamaremos de reg.2, só com o x.1: reg.2 &lt;- lm(y ~ x.1) Agora, para testar a significância conjunta de x.2 e x.3 basta fazer anova(reg,reg.2) e o R reportará os valores do teste (incluindo o p valor) Testes mais gerais também estão disponíveis, pelo pacote car5. O comando é linearHypotesis com o primeiro argumento sendo o objeto com o modelo. O segundo comando é a hipótese que estamos testando, entre aspas, e entramos ele de maneira extremamente intuitiva: suponha que no exemplo acima queremos testar se o coeficiente de x.2 é igual ao coeficiente de x.4. Nesse caso, o comando se resumiria a linearHypotesis(reg,&quot;x.2 = x.4&quot;). Várias opções podem ser usadas, como usar estimadores de erro padrão robustos a heterocedasticidade. Recomendamos que o leitor olhe o help do comando no R. 4.1.2 Erros padrões robustos Na presença de heterocedasticidade ou autocorrelação, os erros padrões usuais não são confiáveis. Infelizmente, o comando summary não exibe erros robustos por default e nem permite alterar os erros padrões exibidos. Felizmente, o pacote lmtest traz uma opção para o sumário padrão do R. A primeira coisa a fazer é carregar o pacote sandwich (library(sandwich)). O comando é coeftest e a sintaxe é curiosa. No caso do nosso exemplo, se quisermos obter erros robustos a heterocedasticidade: coeftest(reg, vcov. = vcovHC(reg)) Uma explicação: O comando coeftest chama o comando vcovHC do pacote sandwich. Por sua vez, o comando vcovHC precisa saber qual o modelo que vai ter erros robustos. Por isso uma função que recebe uma função. Veja que se quisermos erros robustos a heterocedasticidade e autocorrelação, o comando vira vcovHAC. 4.1.3 Logs Muitas vezes queremos fazer as regressões não com as variáveis em nível, mas com as variáveis em log. Nesse caso, suponha que queremos a variável dependente - y - em log. Para isso, basta fazer log.y &lt;- log(y) e a variável log.y vai ser a versão em log da variável y. Você pode reescrever a regressão como lm(log.y ~ x.1 + x.2 + x.3). Agora, pode ocorrer de em alguns casos o vetor y ter algum elemento zero. Mas \\(\\log(0) = -\\infty\\). O R tem um elemento Inf (e - Inf) para esses casos, mas o comando lm vai acusar um erro ao receber um vetor com algum elemento Inf. A solução é trocar esse valor para alguma coisa, como um NA, que o R vai ignorar6. Para fazer isso, suponha que o vetor com os Inf seja o log.y do paragrafo anterior. Precisamos explicar para o R quais casos nós queremos substituir, e isso é incrivelmente fácil: assim como podemos usar log.y[1] para escolher o primeiro elemento do vetor log.y, podemos colocar entre colchetes uma condição, por exemplo os elementos do vetor log.y que são iguais a infinito. Já tratamos disso: log.y == -Inf faz esse trabalho. Assim, se quisermos substituir os elementos de log.y que são iguais a -Inf por NA, basta usar o seguinte trecho de código: log.y[log.y == -Inf] &lt;- NA 4.2 Probits e Logits Probits e logits também são úteis quando nossa variável dependente é uma dummy. Sempre podemos usar um modelo de probabilidade linear, e nesse caso o comando a ser utilizado é o lm. Mas em casos que queremos usar um probit ou logit, precisamos recorrer ao glm, que tem sintaxe muito parecida com o lm. Mas além de especificar as variáveis dependentes e independentes, também precisamos especificar o tipo de regressão, basicamente a distribuição da variável dependente. No caso de probits e logits, a variável dependente tem distribuição binomial. Depois, temos que especificar se a função de probabilidade da variável dependente é probit ou logit. Os comandos para estimar probits e logits são ilustrados abaixo: mod.1 &lt;- glm(y ~x.1 + x.2 + x.3, family = binomial(link = &#39;probit&#39;)) mod.2 &lt;- glm(y ~x.1 + x.2 + x.3, family = binomial(link = &#39;logit&#39;)) E como de praxe, podemos usar o comando summary para obter os coeficientes, desvios padrões e estatísticas t. 4.3 Variável instrumental Métodos de variável instrumental são muito úteis e populares, especialmente em casos de endogenidade. Existem várias implementações, mas para o mínimos quadrados de dois estágios usual, o pacote AER oferece um comando ivreg. A sintaxe é similar ao lm, mas com uma alteração na formula para inserir os instrumentos, que são separados dos regressores por |. Por exemplo, suponha que temos a variável dependente y, as variáveis endogenas x.1 e x.2, a variável exogena x.3, e os instrumentos z.1 e z.2. Nesse caso, o ivreg seria usado: modelo &lt;- ivreg(y ~x.1 + x.2 + x.3|z.1+z.2+x.3) E podemos usar o summary para ver o valor dos coeficientes, erros padrão e estatísticas t. Observe que o pacote não mostra o valor do teste F para o primeiro estágio nem de teste de sobre identificação. 4.4 Dados em painel Em muitas aplicações usamos dados em painel - i.e., com dimensão temporal e cross section. Em geral, esse tipo de aplicação acaba envolvendo o uso de efeitos fixos. Existem duas maneiras de fazer: usando o pacote plm ou “na mão”, usando o lm. Não há nenhuma vantagem de usar o lm “na mão”, em geral, exceto em casos que temos mais de duas dimensões ou por algum motivo o plm não funciona. Exploraremos primeiro o uso do plm, que deve satisfazer a maioria dos usuários. A solução na mão vem depois e pode ser ignorada sem perda de continuidade. Supondo que o pacote já foi instalado e carregado, precisamos (i) explicar para o pacote quais colunas são as colunas com efeitos fixos de tempo e unidade e (ii) rodar a regressão propriamente dita. Suponha, como de praxe, que temos um dataframe carregado no R com nome “dados”. Suponha que as colunas com as datas e um índice para unidades se chamam datas e unidades, respectivamente. Veja que essas colunas podem estar em formato de carácter, e que isso não deve nos preocupar no momento: poderia ser o caso de a unidade ser estados do país e o código da unidade ser o código do estado (DF,RJ,SP,…). O pacote plm disponibiliza o comando plm.data, que converte um data frame de forma que quando rodarmos a regressão, o R saiba quem são os efeitos fixos. Assim, vamos criar um dataframe chamado dd: dd &lt;- plm.data(dados,c(&#39;unidades&#39;,&#39;datas&#39;)) O primeiro argumento da função é o data.frame a ser convertido, que contém as colunas para as quais criaremos efeitos fixos. O segundo argumento da função são as colunas com os efeitos fixos. Veja que a ordem é unidade e depois a variável temporal. Agora, a estimação do modelo pode ser feita usando o comando plm, que tem sintaxe muito similar ao lm: passamos uma formula com a variável dependente e as independentes, informamos a base de dados - que nesse caso é o objeto dd, não o objeto dados. Mas temos algumas novas opções: o método de estimação (em geral estamos interessados em within, o padrão), mas mais relevante é que efeitos fixos queremos colocar: só para indivíduo, só para tempo ou ambos. Abaixo, mostramos a sintaxe para cada um dos casos, respectivamente: mod.1 &lt;- plm(y ~x.1 + x.2,data = dd, effect = &#39;individual&#39;) mod.2 &lt;- plm(y ~x.1 + x.2,data = dd, effect = &#39;time&#39;) mod.3 &lt;- plm(y ~x.1 + x.2,data = dd, effect = &#39;twoways&#39;) Como de praxe, podemos usar o comando summary para obter um sumário da regressão. 4.4.1 Painel usando lm* Suponha que não conseguimos usar o plm por alguma razão. Por exemplo, podemos querer três efeitos fixos: se tivermos microdados de escola, podemos querer ter efeito fixo de aluno, escola e tempo. Podemos implementar isso no braço usando o lm. Lembre-se que, no fundo, efeitos fixos são mera dummies, então se fizermos um modelo linear com dummies, devemos obter resultados parecidos. Para ficarmos em terreno conhecido, suponha que só temos dois efeitos fixos que nos interessam: unidade e tempo. Cada um desses vem codificado em duas colunas: uma com a data e outra com algum código para a unidade. Lembrem-se da discussão no capítulo anterior que o lm é capaz de usar isso e entender como dummies, sem a necessidade de criar várias variáveis com 0 e 1. Logo, se queremos explicar y usando x como variável explicativa e efeitos fixos de unidade e tempo, a seguinte regressão deve bastar: modelo &lt;- lm(y ~x +tempo + unidade, data = dados) E y,x,tempo e unidade estão no dataframe chamado dados, como de praxe. Algumas diferenças devem ser notadas para o comando plm: O sumário vai ser mais confuso no caso do lm: o plm esconde os efeitos fixos, o que não ocorre no caso do lm Mas mais importante: Devido a maneira como o plm estima o modelo (por within, em geral), o plm usa menos graus de liberdade e pode fazer estimações mais precisas. Isso deve impactar mais nos desvios padrões que no valor dos coeficientes, especialmente quando o número de variáveis for muito grande. Hands on! É uma boa hora de checar se os resultados do plm e do lm são de fato similares. O pacote AER traz a base de dados do exemplo de dados em painel sobre cigarros tirado do livro do Stock e Watson. Para carregar, basta digitar data(&quot;CigarettesSW&quot;). Os efeitos fixos são para estado e ano, e vem em colunas com nomes state e year, respectivamente. As variável packs nos traz o número de pacotes consumido naquele ano e estado, e income a renda do estado naquele ano. Uma regressão packs em income com efeitos fixos para estado e ano pode ser feita usando os dois métodos da seção anterior: o plm e o lm. Ambos devem dar, aproximadamente, o mesmo valor para o coeficiente do efeito da renda sobre pacotes \\((-9.070e-08)\\). Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ Nada haver com carro: é uma sigla para Companion to Applied Reggresion↩ Nem sempre o R vai ignorar um NA. Isso depende do pacote e das configurações do R↩ "],
["apresentando-os-resultados.html", "Capítulo 5 Apresentando os resultados 5.1 Tabelas 5.2 Markdown 5.3 Gráficos", " Capítulo 5 Apresentando os resultados Os milhares de modelos que você rodou são tão úteis quanto a sua capacidade de apresentar eles. Sem sermos capazes de apresentar os resultados, nosso trabalho é estéril. Este capítulo apresenta algumas maneiras de usar o R para apresentar resultados. 5.1 Tabelas Feitas as regressões, precisamos apesentar os resultados. Você sempre pode copiar e colar o sumário do R, mas convenhamos: ele é feio. Podemos digitar na mão, mas isto é trabalhoso. A boa notícia é que alguns pacotes do R ajudam ao criar tabelas. Damos atenção a dois: o stargazer e o xtable. A má notícia é que esses dois pacotes não geram tabelas para o Word. Eles geram tabelas para LaTeX e para html. LaTeX é uma linguagem muito popular para escrever artigos científicos e livros - este manual foi, originalmente, escrito em LaTeX; já html é a linguagem padrão para criar sites na internet, e é a base do Markdown, apresentado na próxima seção. O que vemos nos documentos como esse e como sites da internet são as versões compiladas. Tanto html, Markdown e LaTeX não são como o Word, que o que você vê é como vai ficar no documento final: ambas são, de certa forma, linguagens de programação para produzir textos. Há um comando para colocar as palavras em negrito, outro para itálico etc. Explicar como usar o LaTeX foge do escopo deste manual. Entretanto, o autor incentiva que o leitor aprenda LaTeX ou Markdown. O Markdown, que vai ser apresentado com mais detalhes na próxima seção, é um passo intermediário entre o R e o LaTeX, e pode facilitar imensamente o aprendizado do LaTeX. Alguns motivos para aprender LaTeX (e Markdown) é que (1) é mais fácil digitar equações, (2) fácil de integrar com o R, (3) uma vez que você aprende, é mais fácil que o Word, (4) os documentos em LaTeX são mais bonitos que os efeitos em Word. As referências no fim do manual trazem alguns links para os interessados em aprender LaTeX. O xtable converte tabelas do R para o formato LaTeX. Se você tem uma matriz de nome matriz e fizer xtable(matriz), o R vai fornecer o código em LaTeX para fazer uma tabela com os elementos da matriz. Já o stargazer apresenta o sumário da regressão em formato LaTeX (ou html) automaticamente. Suponha que você tenha um modelo chamado modelo. Usar stargazer(modelo) vai apresentar o sumário do modelo. O comando é altamente configurável, com uma infinidade de parâmetros; e funciona com vários pacotes e não só com comandos da base do R, como o lm. 5.2 Markdown O Rstudio já vem com uma opção para trabalhar com arquivos markdown, e para criar um novo arquivo markdown basta ir no menu, new file, R Markdown. O R Markdown também depende de comandos para fazer as alterações no texto - por exemplo, itálico são asteriscos cercando o texto. Assim, se digitarmos no markdown *itálico*, o resultado final seria itálico. Isso pode parecer esquisito a primeira vista, mas uma vez criado o hábito, o comportamento é bem mais previsível que o word. O Markdown é mais fácil de usar que o LaTeX, mas tem menos opções. O Rstudio tem várias dicas de como usar o Markdown - basta olhar o help do Rstudio, ir na opção cheatsheets, e temos duas opções: R Markdown Cheatsheet e R Markdown Reference Guide. Ambos são úteis. Também no help temos o Markdown Quick Reference, que tem os principais comandos para o Markdown, e que abre na mesma janela que o help do R. Veja que ao criar um novo arquivo, ele dá várias opções: html, pdf, word. Se você escolher html, pode gerar um pdf ou arquivo word depois, mas não o contrário. Logo, escolha o html. Se você não fez nenhuma alteração na organização do RStudio, ele deve abrir em cima do console. Há várias opções na barra abaixo do nome do arquivo e a mais importante é o Knit: ele vai gerar o documento que você quer ver. Na primeira vez que você clicar nele, você vai ter que salvar o arquivo: dê um nome e não esqueça de colocar a extensão .Rmd. Assim, se o arquivo se chama relatório, você deve salvar como relatorio.Rmd7. Se tudo der certo, o R vai abrir o novo arquivo, devidamente formatado. Ele terá o mesmo nome que o arquivo que você salvou. Assim, você terá dois arquivos: o .Rmd e o .html - assim como, quando geramos um pdf a partir do word, temos um arquivo .docx e um .pdf. A ideia é a mesma: é possível editar o .Rmd e gerar o html a partir dele. Veja que é possível que ele dê algum erro - exatamente como quando rodamos um programa no R. A parte mais interessante do Markdown é que é possível colocar pedaços de código do R (e até mesmo de outras linguagens) no meio do texto, e o Markdown vai “dar” esse pedaço de código para o R rodar e reportar o resultado. Veja o help do Markdown sobre como fazer isso. Apesar de ser uma possibilidade interessante, ela pode ser problemática: se algum pedaço do seu código demorar muito para rodar, toda vez que ocê der Knit o código vai ser rodado. A opção cache = TRUE no bloco deve amenizar isso. 5.3 Gráficos Outra ferramenta fundamental para apresentar resultados são gráficos. O R tem um pacote padrão para gráficos e um pacote extra amplamente usado chamado ggplot2. Neste manual não irei tratar do ggplot2: o R Studio tem um help excelente que introduz o uso do ggplot2. Os gráficos do R são feitos em camadas: a primeira camada é feita com o comando plot; para adicionar novas coisas na mesma imagem, existe uma série de outros comandos. Usar o plot de novo vai gerar uma nova imagem. Em geral, o plot recebe qual(is) série(s) serão exibidas. Você pode passar uma única série, que será plotada no eixo y, e o eixo x será apenas o número da observação; ou x e y, e o gráfico vai mostrar os pontos com coordenadas (x,y). Cada um dos casos, respectivamente: x &lt;- rnorm(100) #Gerando alguns números de uma normal y &lt;- 2*x+rnorm(100) #y é uma função de x com algum erro adicionado plot(y) plot(x,y) O comando plot tem uma opção especial chamada type. Aqui você pode escolher como os dados são plotados: em pontos, em linhas ou diversas outras opções descritas no help. O padrão é pontos. Em geral, se passa a primeira letra de cada tipo. Assim, para fazer o gráfico de linha da variável y, basta usar plot(y, type=''l''): plot(y,type=&quot;l&quot;) Existem vários comandos para colocar novos objetos sobre o gráfico, mas vou me limitar a dois: points e lines, que adicionam respectivamente… pontos e linhas. Em geral, plot,lines e points recebem argumentos parecidos: col específica a cor. Em geral, se usa números: 1 é preto, 2 é vermelho… lty específica o tipo da linha: logo, é inútil para o comando points ou plot sem type=“l”. Também usamos números: 1 é a linha sólida, 2 é a linha tracejada… pch é a contraparte do lty para pontos e permite escolher qual o tipo de ponto que será usado no comando points ou no plot com opção type = “p”. Também se usa números para especificar como serão os pontos Cada comando gráfico tem suas particularidades e uma visita ao help de cada um deles é sempre necessária para o autor deste manual. Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ "],
["ifs-fors-whiles.html", "Capítulo 6 Ifs, Fors, Whiles 6.1 If 6.2 For e While 6.3 Diferenças e Semelhanças entre for e while", " Capítulo 6 Ifs, Fors, Whiles Todas as linguagens de programação usam ifs, fors e whiles, que sempre fazem a mesma coisa em linhas gerais. Este capítulo trata deles. Cada seção vai tratar de cada um deles, e todas serão estruturadas da seguinte maneira: primeiramente, só apresentamos a sintaxe dos comandos no R. A seguir, temos uma discussão sobre o que cada estrutura faz. Desta maneira, aqueles que já conhecem essas estruturas de outras linguagens podem simplesmente ler a sintaxe e pular toda a discussão subsequente. Em geral, os exemplos podem não parecer ter utilidade prática, mas servem para entender as ideias. Aplicações práticas são encontradas nos capítulos subsequentes. 6.1 If Ifs são estruturas condicionais: se essa condição é atendida, faça isso. Senão, faça aquilo outro. A sintaxe é: if(condição){ ação se a condição for atendida} else { ação se a condição não for atendida} Por exemplo, podemos escrever um código que testa se \\(x\\) - que deve ser um número - é igual a 18, e se sim ele nos mostra um “Sim”. Caso contrário, “Não”. x &lt;- 18 if(x==18){ print(&quot;Sim&quot;)} else { print(&quot;Não&quot;)} ## [1] &quot;Sim&quot; x &lt;- 21 if(x==18){ print(&quot;Sim&quot;)} else { print(&quot;Não&quot;)} ## [1] &quot;Não&quot; Podemos concatenar vários else e ifs e testar várias condições. Podemos querer saber se x é menor que 5 ou maior que 7: x &lt;- 5 if(x &lt; 5){ print(&quot;Menor que 5&quot;)} else if(x &gt; 7){ print(&quot;Maior que 7&quot;)} else { print(&quot;Nenhum dos dois&quot;)} ## [1] &quot;Nenhum dos dois&quot; x &lt;- 8 if(x &lt; 5){ print(&quot;Menor que 5&quot;)} else if(x &gt; 7){ print(&quot;Maior que 7&quot;)} else { print(&quot;Nenhum dos dois&quot;)} ## [1] &quot;Maior que 7&quot; Essa estrutura pode ser chata e requerer muitas linhas quando queremos algo simples. Pense no caso que queremos definir a variável h como 1 se x é maior que 1, e 0 caso contrário. Felizmente, o comando ifelse resolve isso. A sintaxe dele é simples: a condição, o valor se a condição for atendida e o valor se a condição não for atendida. Assim, no exemplo acima: h &lt;- ifelse(x &gt; 1 ,1,0) h ## [1] 1 Entretanto, em muitas situações, usar a estrutura do if ao invés da função ifelse() é útil. 6.2 For e While For (e whiles) são loops: eles permitem repetir a mesma operação várias vezes. Para eles serem interessantes, eles tem que permitir alguma alteração no input e no output. A sintaxe do for é: for(i in 1:n){ ações... } Veja que podemos indexar o for por qualquer letra (e não apenas i), e que podemos usar um vetor para indexar o for, o que vai fazer o for repetir a operação pelo comprimento daquele vetor - e definir o valor de i como o valor dos elementos do vetor. Por exemplo: a &lt;- c(1,2,3,4,5) b &lt;- 0 for(i in a){ b &lt;- b + i print(b) } ## [1] 1 ## [1] 3 ## [1] 6 ## [1] 10 ## [1] 15 Hands on! Podemos usar o for para ilustrar uma ideia bastante importante de estatística: a lei dos grandes números. Para refrescar a memória: a lei dos grandes números diz que se a variável aleatória tem média \\(\\mu\\), \\(\\bar{X}\\) é a média amostral e \\(n\\) é o tamanho da amostra, então \\(\\text{plim}_{n \\rightarrow \\infty}(\\bar{X}) = \\mu\\). O código para ilustrar isso é simples: Gere um vetor de variáveis aleatórias retirados de alguma distribuição (por exemplo, rnorm(200)). Vamos chamar esse vetor de amostra. Crie um vetor de zeros (você pode fazer isso usando rep(0,200)) Chame ele de alguma coisa. No caso, chamarei ele de media Crie um loop que faz com que cada posição do vetor media seja a média dos números em amostra até aquela posição. Assim, se tivermos na 4ª posição de media, teremos a média dos números da amostra de 1 a 4. Plot o vetor media: ele deve se aproximar da media verdadeira do processo conforme n cresce. Você pode testar \\(n\\) diferente de 200 para ver o quão bom fica a aproximação, bem como diferentes distribuições e parâmetros. O while funciona de maneira parecida, mas ao invés de ir até o fim do contador, o while depende de alguma condição. O exemplo mais usual é um while que acaba quando uma variável alcança um certo valor. Por exemplo: b &lt;- 0 j &lt;- 1 while(j &lt; 6){ b &lt;- b + j j &lt;- j + 1 } Esse exemplo faz exatamente a mesma coisa que o for anterior. Observe que temos que adicionar a linha j &lt;- j +1, senão j nunca irá alcançar 6, e o R nunca vai sair do while: ele vai ver \\(j = 1\\) e continuar no while infinitamente. Também observe que temos que criar o j &lt;- 1, enquanto no for não havia a necessidade de criar a variável i de antemão. 6.3 Diferenças e Semelhanças entre for e while O exemplo anterior de while deixa claro que ele é muito semelhante ao for: ambos permitem repetir um conjunto de operações um certo número de vezes. A inclusão do while parece até um desperdício: uma função quase idêntica ao for que exige duas linhas de código a mais. Mas enquanto muitas vezes o for é mais usado que o while, o while tem suas vantagens, como o seguinte exemplo ilustra. Suponha que queremos gerar 100 matrizes de 100 observações com 10 variáveis independentes de uma normal e queremos garantir que a matriz seja invertível8. Poderíamos escrever: matrizes &lt;- list() for(i in 1:100){ matrizes[[i]] &lt;- matrix(rnorm(100*100),ncol = 100, nrow = 100) } Veja o que o exemplo acima faz: Cria uma lista vazia chamada matrizes Para cada posição da lista, ele vai criar uma matriz com 10 colunas e 100 linhas o conteúdo dessa matriz são 1000 números saídos de uma normal de média zero e variância 1. Não foi especificado que a matriz tem que ser invertível: em nenhum ponto nós testamos isso. Nós poderíamos construir um teste usando if, de forma que se a matriz não for invertível (por exemplo, tem determinante zero), a matriz é ignorada. Mas observe que isso gera um problema: se a matriz for ignorada, o for continua e vai gerar uma matriz a menos do que queríamos. É ai que o while entra: podemos escrever o código com while de maneira que, quando a matriz tiver determinante 0, o contador não cresce. O código seria algo como: matrizes &lt;- list() i &lt;- 1 while(i &lt;= 100){ candidato &lt;- matrix(rnorm(100*100),ncol = 100, nrow = 100) teste &lt;- det(candidato) if(teste == 0){} else{ matrizes[[i]] &lt;- candidato i &lt;- i + 1} } Veja que só aumentamos o contador quando o determinante é diferente de zero , ou seja, quando aceitamos a matriz. Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ "],
["funcoes.html", "Capítulo 7 Funções 7.1 Um exemplo simples: uma função matemática 7.2 Caso geral e exemplos 7.3 Por que escrever funções? 7.4 Como escrever funções", " Capítulo 7 Funções Nesse capítulo explicamos o que são as funções, como e porque usar. Também damos algumas dicas de como criar as funções. A primeira coisa que deve ser observada é que funções não se limitam a funções matemáticas: uma função recebe alguns inputs, faz algumas operações e devolve um output. Isso pode ser tão geral quanto necessário: de funções que recebem um valor de \\(x\\) e retornam \\(x^2+x+4\\) até funções que recebem matrizes e fazem operações complicadíssimas. Por exemplo, o comando lm, que usamos para estimar uma regressão linear, é uma função que recebe a variável dependente e a variável independente e faz uma série de operações com elas e devolve os coeficientes e seus erros padrões. Em geral, funções são criadas para tarefas que serão repetidas várias vezes. Não faz nenhum sentido escrever uma função que só será usada uma única vez. 7.1 Um exemplo simples: uma função matemática Suponha que queremos uma função \\(x^2+2x+4\\), que iremos chamar de funcao. Nesse caso: funcao &lt;- function(x){x^2+2*x+4} Veja que, depois de function, entre parêntese, temos o nome da variável. Entre chaves o que a função de fato faz. Podemos criar uma função $ G = x^2 + y^2$. Nesse caso, o código é: G &lt;- function(x,y){x^2+y^2} Veja que podemos precisar de definir funções como essas quando queremos integrar ou derivar usando o R. Mas em geral, um exemplo mais interessante de como (e porque) usar funções são exemplos não numéricos. 7.2 Caso geral e exemplos Em geral, funções são feitas da seguinte forma: nome_da_funcao &lt;- function(variaveis){ comandos } Veja que podemos ter muitas variáveis - e em geral as funções do R tem dezenas de variáveis. Os comandos podem ser absolutamente qualquer coisa que o R faz: de rodar uma regressão até operações com arquivos. O importante ao escrever funções - e provavelmente o mais difícil - é estruturar as coisas de maneira geral: os inputs são as variáveis da função e não coisas que estão neste momento no ambiente do R. Existem duas coisas importantes sobre funções que devem ser explicitadas antes de seguirmos para o próximo exemplo: Variáveis podem ter defaults quando a função é construída. Por exemplo, na função \\(G(x,y) = x^2+y^2\\), podia ser o caso de que, exceto se o usuários especificasse ao contrário, o padrão fosse \\(y = 0\\). Para estabelecer essa mudança, bastaria alterar o código para: G &lt;- function(x,y=0){x^2+y^2} Assim: G(1) ## [1] 1 G(1,0) ## [1] 1 Os exemplos de funções matemáticas foram muito simples e o R sabe exatamente qual resultado deve ser exibido. Isso nem sempre é verdade, e em funções mais complicadas usamos o comando return. O comando só funciona dentro de funções e diz o que a função deve retornar como resposta. No exemplo da função numérica, poderíamos ter escrito: g &lt;- function(x,y){return(x^2+y^2)} Vamos aplicar essas duas ideias. Suponha que queremos gerar duas amostras de normais independentes que podem ter médias e variâncias diferentes. Também queremos poder mudar o tamanho da amostra. No fim, essa função deve retornar uma matriz \\(n \\times 2\\), onde n é o tamanho da amostra. E ainda queremos que, por padrão, as duas variáveis sejam uma normal padrão (com média zero e variância 1). Podemos escrever: amostrador &lt;- function(n,media_x = 0,media_y = 0,variancia_x = 1,variancia_y = 1){ sd_x &lt;- sqrt(variancia_x) sd_y &lt;- sqrt(variancia_y) amostra.x &lt;- rnorm(n,media_x,sd_x) amostra.y &lt;- rnorm(n,media_y,sd_y) return(cbind(amostra.x,amostra.y)) } amostrador(100) ## amostra.x amostra.y ## [1,] -1.380298821 -0.147131584 ## [2,] -0.591277762 0.798598451 ## [3,] -0.231567267 0.071561977 ## [4,] 1.698680471 -0.057202424 ## [5,] 0.584985286 0.423163855 ## [6,] 1.742563656 0.113208578 ## [7,] 0.800433226 1.761994723 ## [8,] -0.046062883 0.145826533 ## [9,] 0.356897961 0.807075063 ## [10,] 0.369645294 -0.457378193 ## [11,] 1.096467014 0.182427549 ## [12,] 0.868614133 -0.234188208 ## [13,] 2.278019809 -0.394705833 ## [14,] 0.288617014 1.476778064 ## [15,] 1.188947649 -0.254454226 ## [16,] 0.012881909 -0.061980945 ## [17,] 0.060578832 -0.271236165 ## [18,] 2.771361605 1.709343772 ## [19,] 0.651168686 0.244707640 ## [20,] -1.066015589 -0.009647945 ## [21,] -1.068579644 0.488515259 ## [22,] -2.612009042 0.856348631 ## [23,] -0.695347296 0.519688548 ## [24,] 0.399685994 0.082116425 ## [25,] 1.956223149 -0.064897785 ## [26,] -1.946855324 -1.120970352 ## [27,] 0.321964330 0.600095465 ## [28,] 0.004287931 0.067440580 ## [29,] -1.243092256 -0.485752065 ## [30,] 0.088480483 0.355431684 ## [31,] -0.998412313 0.193244997 ## [32,] 0.004525607 -0.642118798 ## [33,] 2.253755525 0.430688704 ## [34,] -0.421194412 1.160670203 ## [35,] 0.863350501 0.633020786 ## [36,] -1.298717848 -0.321868719 ## [37,] 0.202832420 0.331478881 ## [38,] 0.016561968 -1.564544163 ## [39,] 0.083115000 -1.292964154 ## [40,] 0.877247101 1.043816619 ## [41,] 1.786720628 0.143457622 ## [42,] 0.650435658 -0.486036493 ## [43,] -1.094530260 -0.700882306 ## [44,] 0.631077143 -0.246866238 ## [45,] -2.267088616 1.877112544 ## [46,] 0.059613298 -2.109554281 ## [47,] 0.932077800 0.758715935 ## [48,] -0.238374864 0.629888969 ## [49,] -0.495940215 0.382888300 ## [50,] 0.085213702 -0.320761316 ## [51,] -0.935642427 2.197078567 ## [52,] 0.723984922 -0.779464662 ## [53,] 0.162860174 1.511023127 ## [54,] -0.896498424 -1.286588876 ## [55,] -0.799021867 -1.551254765 ## [56,] -1.602901796 -0.488391174 ## [57,] 0.048276470 -0.132943527 ## [58,] -1.289955803 0.522893834 ## [59,] -0.452483344 1.033501741 ## [60,] 0.928226161 -0.372438378 ## [61,] 0.458090282 -0.766071842 ## [62,] 0.355474646 1.296266207 ## [63,] -0.886989593 0.217180634 ## [64,] 1.149309452 -0.025247124 ## [65,] 0.234358047 0.746640444 ## [66,] -0.578536077 0.226235026 ## [67,] 0.375885797 -0.717955001 ## [68,] 0.029400387 0.069747663 ## [69,] -0.270167814 -0.775950208 ## [70,] -0.226542401 -0.622222236 ## [71,] -0.746828584 -0.494314292 ## [72,] -1.045852502 0.119834823 ## [73,] 0.629063557 0.831475121 ## [74,] -0.872191214 -0.649460585 ## [75,] -0.719897983 0.130151365 ## [76,] 2.823044829 0.576313325 ## [77,] 1.578071751 -1.934064298 ## [78,] -0.297786108 2.989490594 ## [79,] -1.547789191 1.622190310 ## [80,] 0.505574843 -1.041959706 ## [81,] 0.957057184 -0.027948978 ## [82,] 1.459018971 -0.915524983 ## [83,] 1.282118029 -1.527306980 ## [84,] -0.376318774 3.029963648 ## [85,] 0.759908394 -1.781739428 ## [86,] 0.630168904 0.616048646 ## [87,] -1.216789994 -0.031489406 ## [88,] 0.543019280 -0.719786667 ## [89,] -1.039207096 -1.070896788 ## [90,] 0.650998875 -0.256397782 ## [91,] -0.709730927 -0.357204711 ## [92,] 0.278491021 -0.823542924 ## [93,] 2.732879986 -0.646170021 ## [94,] 0.391175672 0.299459349 ## [95,] 0.393560782 -2.076223485 ## [96,] -0.340618443 -0.436367548 ## [97,] -1.052526306 -1.084989750 ## [98,] -0.922990521 2.102133576 ## [99,] -3.257367720 -0.590250612 ## [100,] -0.805980435 -3.354158387 Veja que, como o rnorm recebe o desvio padrão da distribuição e a minha função tem como parâmetro a variância da distribuição, criei uma variável na função que tira a raiz quadrada. Atenção: checando argumentos É importante notar que em todos os casos, os argumentos de uma função são restritos de alguma forma: no exemplo acima, \\(n\\) tem que ser um número inteiro; a variância não pode ser negativa. Aqui, isso não é tão importante por dois motivos: (1) eu estou assumindo que só você vai usar a função e você sabe o que cada argumento recebe, (2) o rnorm daria um erro caso você violasse essas duas restrições. Isso nem sempre é verdade e pode gerar muitos problemas, então em geral desenvolvedores sérios criam ifs que checam o tipo do argumento passado. Isso vai além do escopo do manual. 7.3 Por que escrever funções? Escrever funções nem sempre é fácil, especialmente para iniciantes. Uma função te força a escrever tudo em termos gerais: um n que não existe, um vetor que ainda não foi criado, etc. Como dito no inicio deste capítulo, funções são criadas para tarefas que serão repetidas várias vezes. Em geral, há uma tentação de copiar e colar o código várias vezes fazendo as alterações necessárias ``no braço’’. Não caia nesta tentação! Há dois motivos básicos para isso: O seu código vai ser ilegível em pouco tempo, com milhares de linhas repetidas que você é incapaz de ver qual a diferença É muito fácil esquecer de mudar uma parte do código e a coisa dar erro, ou ainda pior, rodar e te dar um resultado errado. Este autor já precisou rodar de novo várias partes de código que demoravam horas por esquecer de mudar alguma pequena coisa no código copiado e colado. Usar funções é uma maneira muito mais razoável de resolver o problema e, uma vez criada e debbugada, a dor de cabeça é muito menor. Quando o autor aprendeu R, ele foi informado de que escrever tudo em funções era o ideal e ignorou. Esta parece ser uma das muitas coisas que só se aprende cometendo o erro. 7.4 Como escrever funções Um dos principais motivos para iniciantes no R ignorarem a sugestão da seção anterior é que escrever funções pode ser desafiador. Escrever a função exige, de antemão, que você saiba o tamanho dos vetores, matrizes, como o código irá se comportar etc. Existe uma maneira simples de mitigar este desafio: comece escrevendo o caso específico e depois generalize. No exemplo das duas amostras normais, nós poderiamos ter começado escrevendo apenas: amostra.x &lt;- rnorm(100,0,1) amostra.y &lt;- rnorm(100,2,2) E depois ter generalizado: sabemos que 100 é o tamanho da amostra, então troque por n. Para permitir médias diferentes (como o código acima fez), colocamos duas variáveis no lugar - com nomes que evidenciam o que elas fazem. Etc. No fim, só precisamos colocar, no começo, o nome.da.funcao &lt;- function(argumentos){e fechar com o return de maneira a amarrar as duas amostras (cbind, talvez). Outro desafio é que o return só aceita um único objeto, ou seja, funções no R só retornam uma única coisa. Em alguns casos isso é um desafio. Voltando ao exemplo das duas amostras, return(amostra.x,amostra.y) daria um erro. A solução aqui é simples: cole os dois vetores em uma matriz. Mas nem sempre isso é possível: e se os vetores tiverem dimensão diferente? E se a função gera várias matrizes? Nesses casos, lembre que list() recebe qualquer coisa. Você pode ter um elemento na lista que é só um número, outro que é um vetor e até uma lista! O comando lm retorna, de fato, uma lista. Dentro da lista há um vetor com os coeficientes, uma matriz de variância covariância e outras coisas. Uma terceira dica é quebrar uma função grande em funções menores. O R permite que uma função chame outra, o que facilita em muito o processo de criação de funções complicadas. Em um exemplo extremo, poderíamos imaginar que você quer fazer uma função que faz OLS para você. Poderiamos quebrar isso em vários pedaços: uma que estima os coeficientes, outra que calcula o erro padrão, uma terceira que faz a conta do \\(R^2\\)…e finalmente uma última que amarra todas essas funções e devolve uma lista com os coeficientes, erros padrões e tudo mais. "],
["paralelizando.html", "Capítulo 8 Paralelizando 8.1 Desafios computacionais de paralelização 8.2 Configurando o R para paralelizar 8.3 Usando a paralelização", " Capítulo 8 Paralelizando Muitas tarefas no R consomem muito tempo. Loops longos são um caso particular disso. Se cada iteração do loop demora 1s e você pede para repetir a iteração mil vezes, você gasta mil segundos (16 minutos)! Infelizmente, muitas operações acabam caindo em problemas que são loops. Felizmente, existe uma maneira de agilizar o processo. Isso se deve a dois fatos. O primeiro é que a estrutura do for muitas vezes permite que cada tarefa seja feita separadamente. Isso é muito frequente em simulações, que serão tratadas em mais detalhes mais a frente. O outro fato é que o R não aproveita 100% da capacidade da maioria dos computadores atuais. Os computadores atuais vem com processadores com mais de um núcleo (multi core9). Cada núcleo age como um pequeno processador e o computador distribui as tarefas entre estes núcleos. Em um for, poderíamos dar cada iteração do loop para núcleo do processador, e quando o núcleo termina a iteração ele devolve a resposta recebe uma nova iteração para fazer. Isso é chamado de paralelização e agiliza muito situações em que precisamos de um loop. Podemos pensar em uma situação equivalente bastante prática: suponha que queremos multiplicar todos os números de 1 a 10. Se sentarmos uma única pessoa para fazer a conta, esta pessoa vai demorar. Entretanto, se tivermos quatro pessoas na sala, podemos deixar a primeira pessoa multiplicar 1,2,3; a segunda 3,4,5; a terceira 6,7,8; e a quarta 9,10. No fim, pegamos o resultado e pedimos para a primeira e a quarta pessoa multiplicarem seus resultados com os resultados da segunda e da terceira, respectivamente. E por último multiplicamos o resultado que elas obtiveram. De fato, antes da existência dos computadores, contas complicadas eram feitas assim! O tratamento dessa seção deve muito a este documento 8.1 Desafios computacionais de paralelização A primeira coisa a se observar é que paralelizar coloca um enorme peso sobre o computador. O R gera novos processos e cada um vai para um núcleo do processador. Isso deixa o computador sobre uma carga brutal de trabalho. Assim, rodar código paralelizado usualmente requer que você deixe o computador fazendo apenas o que você pediu para o R e nada mais. Outro problema é que processos paralelizados gastam muita memória RAM. Assim, é importante ficar de olho no consumo de RAM (via gerenciador de tarefas). Tratarei desse problema mais a frente, mas uma boa regra de bolso é que cada núcleo precisa de mais ou menos um 1,5GB de RAM. Mas isso vai variar de sistema para sistema. 8.2 Configurando o R para paralelizar Vamos precisar de dois pacotes para a paralelização: o foreach e o doParallel. Carregue os dois pacotes. É sempre bom saber quantos núcleos nós temos, e isso é possível via o comando detectcores(). Na sequência só precisamos definir o número de núcleos, que no código a seguir foi definido pela variável n.cores. O resto dos comandos é padrão e não temos que entender o que cada um faz: n.cores &lt;- 3 cl &lt;- makeCluster(n.cores) registerDoParallel(cl) Observe que até podemos definir um número de núcleos maior do que o que detectcores() mostra, mas isso vai ser extremamente problemático: nós teremos 30 seções do R disputando por recursos do computador. Como regra de bolso, n.cores deve ser, no máximo, como o número de núcleos que o detectcores() encontrou menos 1. Para checar se o R registrou corretamente e consegue usar os processos paralelizados, use o comando getDoParWorkers(). Ele irá indicar o mesmo número que você colocou no n.cores se tudo tiver dado certo. 8.3 Usando a paralelização Uma vez configurado, temos mais uma etapa: o comando for usual do R não consegue usar as vantagens da paralelização. Por isso, precisamos usar o comando foreach, que é muito semelhante, mas tem diferenças importantíssimas. A primeira é que o foreach vai gerar um objeto, ao contrário do for. Você pode explicar qual o objeto vai ser gerado usando a opção .combine entre as opções. O default é criar uma lista. Também é importante entender que o que vai ser colocado no objeto que o R vai gerar com o foreach é o último comando dentro do foreach que não é a criação de um objeto. A sintaxe do foreach também é diferente: não usamos o in do for e precisamos colocar um %dopar% entre o parênteses e as chaves. Assim, para repetir alguma coisa n vezes: objeto &lt;- foreach(i=1:n) %dopar% { comandos } Um exemplo deve clarificar. Suponha que queremos tirar a raiz quadrada de todos os números de 1 a 20 e queremos paralelizar isso. Escreveríamos o código da seguinte maneira: raizes &lt;- foreach(i = 1:20) %dopar% { sqrt(i) } Veja que o R vai devolver uma lista. Se quissemos que ele devolvesse um vetor (que parece mais razoável no caso), teriamos que ter alterado o parêntese para (i = 1:20, .combine = c). Veja que se tivéssemos usado a &lt;- sqrt(i), ao invés de sqrt(i), o R teria devolvido uma lista vazia. [^1:]Dai dual core, quad core etc. Alguém poderia argumentar que isso sempre será possível, pois é necessário muito azar para gerar uma matriz desse jeito que é singular. Mas é só um exemplo.↩ "],
["otimizacao.html", "Capítulo 9 Otimização 9.1 Optimize e Optim", " Capítulo 9 Otimização Muitas vezes precisamos resolver problemas que são problemas de maximização ou minimização. Por exemplo, o problema de uma regressão por MQO pode ser escrito como minimizar a soma do quadrado dos erros. O problema de máxima verossimelhança envolve escolher paramêtros que maximizam uma função de densidade conjunta. Esse capítulo explica algumas ideias básicas de como fazer otimização no R. Antes de começarmos, é necessário um aviso importante: otimização no computador raramente é feita tirando a primeira derivada e igualando a zero. Existe uma variedade de algoritmos que fazem otimização e o tema é excessivamente amplo para ser coberto com calma. O Numerical Methods in Economics, de Kenneth Judd, trata de alguns desses métodos - mas saiba que o tema não é simples. Esse capítulo foi escrito de maneira que você pode pular a seção Mais sobre otimização númerica. Mas eu recomendo fortemente a leitura. 9.1 Optimize e Optim O R vem, por padrão, com duas funções básicas para otimização: o optimize e o optim. A diferença entre eles é que o primeiro é para quando se tem uma variável para ser otimizada, e o segundo para mais de uma variável. Em ambos os casos, entretanto, temos que escrever uma função antes, então começaremos por ai. Vamos trablhar com duas funções para entender como usar os comandos: \\(f(x)=x^2\\) e \\(g(x,y)=x^2+y^2\\). Veja que sabemos que o mínimo em ambas é colocar todos os argumentos igual a zero. Já aprendemos a escrever funções. Uma idiosincrasia importante para o caso de mais de uma variável é que precisamos ter apenas um argumento para as variáveis a serem otimizadas, que deve ter a forma de um vetor. Assim, se tivermos dois argumentos na função matemática, teremos um argumento na função do R que vai ser um vetor com duas posições. Escrevemos as funções \\(f(x)\\) e \\(g(x,y)\\): f &lt;- function(x){x^2} g &lt;- function(x) {x[1]^2+x[2]^2} Vamos começar com o optimize: o primeiro argumento é a função e o segundo é o intervalo da busca. Sabemos que o mínimo é igual a zero, então vamos colocar o intervalo entre -2 e 2: optimize(f,c(-2,2)) ## $minimum ## [1] -5.551115e-17 ## ## $objective ## [1] 3.081488e-33 Observe que, apesar de normalmente usarmos a função no R como f(x), o comando recebe apenas f. A resposta tem dois componentes: o valor da variável que minimiza a função ($minimum) e o valor da função nesse ponto ( $objective). Veja que o R não nos devolveu 0 como o valor que minimiza: a minimização é numérica e vai ser sempre um valor aproximado. Mas \\(-5.55 10^{-17}\\) é, para todos os efeitos, zero. Vamos trabalhar agora com a nossa função com duas variáveis. Usamos o comando optimize que recebe primeiro um chute inicial e depois a função. O chute incial deve ser um vetor. Sabemos que o ótimo é o vetor \\((0,0)\\), então para dar algum trabalho para o computador vamos chutar \\((-1,1)\\): optim(c(-1,1),g) ## $par ## [1] 0.0001134426 -0.0001503306 ## ## $value ## [1] 3.546849e-08 ## ## $counts ## function gradient ## 55 NA ## ## $convergence ## [1] 0 ## ## $message ## NULL Veja que a resposta nos trás os valores que minimizam( $par), o valor da função nesse ponto( $value) e algumas outras informações: a mais importante é o $convergence, que nos diz se o algoritmo convergiu ou não - isso é, se encontramos um ótimo ou não. Em geral, se temos um 0 é que tudo ocorreu bem. Outros valores indicam erro e cada algoritmo dá um significado para cada valor. Infelizmente, o chute inicial pode ser muito importante em alguns casos. Pegue a função \\(h(x,y)=x^3+y^2+x*y\\). Vamos testar dois chutes inciais: \\((0,0)\\) e \\((-10,0)\\): h &lt;- function(x){x[1]^3+x[2]^2+x[1]*x[2]} optim(c(0,0),h) ## $par ## [1] 0.16666670 -0.08333335 ## ## $value ## [1] -0.002314815 ## ## $counts ## function gradient ## 99 NA ## ## $convergence ## [1] 0 ## ## $message ## NULL optim(c(-10,0),h) ## $par ## [1] -3.183805e+56 2.684172e+56 ## ## $value ## [1] -3.2273e+169 ## ## $counts ## function gradient ## 501 NA ## ## $convergence ## [1] 1 ## ## $message ## NULL Veja que, no primeiro caso, temos convergência; no segundo, a coisa dá totalmente errada e não há convergência (por isso o código 1 ali no $convergence). Veja que pode ser o caso de que queremos encontrar o máximo de uma função. O optimize tem uma opção maximum, e basta alterar para TRUE. Entretanto, o optim não tem essa opção. A solução é simples: multiplique a função por \\(-1\\). Por exemplo, o máximo de \\(j(x)=- x^2\\) é o mesmo ponto que o mínimo de \\(f(x)=x^2\\). A única coisa que vai mudar é o valor da função no ponto. "],
["referencias.html", "Capítulo 10 Referências 10.1 R 10.2 Tidyverse 10.3 LaTeX", " Capítulo 10 Referências Todas as referências a seguir são em inglês. Isso reflete justamente a limitação da literatura em português sobre R e economia - o exato motivo da confecção deste manual. 10.1 R Dois livros foram essenciais para este autor aprender a usar o R: o R Book, de Michael J. Crawley e o Applied Econometrics with R, de Christian Kleiber e Achim Zeileis. O primeiro é extremamente geral e cobre de tudo, explicando muito dos tópicos tratados aqui superficialmente com muito mais detalhes. O segundo tem um título auto explicativo. 10.2 Tidyverse Uma omissão notável desse manual são os pacotes do Tidyverse, especialmente o Dplyr e o ggplot, que são muito usados para limpar dados e fazer gráficos, respectivamente. O autor desses pacotes, Hadley Wickham, tem um excelente livro sobre como fazer ciência de dados no R, chamado R for Data Science, e que o próprio disponibiliza aqui. O site do Tidyverse também traz excelentes recursos de como usar esses pacotes. 10.3 LaTeX Um dos melhores recursos para aprender LaTeX é o livro da wikipedia sobre a linguagem, disponível aqui. Felizmente, não é sequer necessário instalar o LaTeX no computador, já que existem serviços online que fornecem armazenamento e um editor de LaTeX online. Os dois mais famosos são o overleaf e o sharelatex. "]
]
